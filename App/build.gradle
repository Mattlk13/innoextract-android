apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven'
apply plugin: 'kotlin-kapt'
apply from: 'versioning.gradle'

project.ext.version = "3.2.0"

ext.anko_version = '0.10.4'

repositories {
    mavenCentral()
    maven { url 'http://guardian.github.com/maven/repo-releases' }
    jcenter()
}

dependencies {
    implementation 'com.gu:option:1.3'
    implementation 'net.rdrei.android.dirchooser:library:3.2@aar'
    implementation 'com.adityak:browsemyfiles:1.8'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0'
    implementation 'androidx.legacy:legacy-support-core-ui:1.0.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'com.karumi:dexter:4.2.0'
    implementation 'com.github.debop:koda-time:2.0.0'
    implementation 'joda-time:joda-time:2.10'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.anko:anko-commons:$anko_version"
    implementation project(':Service')
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation "com.google.dagger:dagger:$dagger_version"
    kapt  "com.google.dagger:dagger-compiler:$dagger_version"
}

def keystorePropertiesFile = rootProject.file("signing.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 29
    buildToolsVersion '28.0.3'


    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29

        versionName project.ext.version
        versionCode buildVersionCode()

    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
    }


    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            exclude "mips", "mips64", "armeabi"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk true
        }
    }
}

import com.android.build.OutputFile

ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]

android.applicationVariants.all { variant ->

    if (variant.buildType.name == "release") {
        variant.outputs.each { output ->

            def baseAbiVersionCode =
                    project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))


            if (baseAbiVersionCode != null) {

                output.versionCodeOverride =
                        baseAbiVersionCode * 100000000 + buildVersionCode()
            }
        }
    }
}
